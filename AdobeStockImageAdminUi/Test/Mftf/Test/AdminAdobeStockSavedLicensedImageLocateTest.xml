<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminAdobeStockSavedLicensedImageLocateTest">
        <annotations>
            <features value="AdobeStockImagePanel"/>
            <stories value="User locates licensed and uploaded image inside Media Gallery"/>
            <title value="Adobe Stock Saved Licensed Image Locate"/>
            <description value="User can locate previously licensed and saved image in Media Gallery"/>
            <severity value="CRITICAL"/>
            <group value="adobe_stock_integration_license"/>
            <group value="adobe_stock_integration"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="AdminOpenMediaGalleryForPageNoEditorActionGroup" stepKey="openMediaGalleryForPage"/>
            <actionGroup ref="AdminAdobeStockOpenPanelFromMediaGalleryActionGroup" stepKey="openAdobeStockPanel"/>
            <actionGroup ref="AdminAdobeStockClickSignInActionGroup" stepKey="clickOnSignIn"/>
            <actionGroup ref="AdminAdobeStockImsPopupSignInFillUserDataActionGroup" stepKey="fillUserCredentials"/>
            <actionGroup ref="AdminAdobeStockImsPopupClickSignInActionGroup" stepKey="clickSignInImsPopup"/>
            <actionGroup ref="AdminAdobeStockAssertUserLoggedActionGroup" stepKey="assertUserLoggedIn"/>
            <actionGroup ref="AdminSearchImagesOnModalActionGroup" stepKey="searchForLicensedImage">
                <argument name="query" value="{{AdobeStockConfigDataLicensedImage.value}}"/>
            </actionGroup>
            <actionGroup ref="AdminAdobeStockExpandImagePreviewActionGroup" stepKey="expandLicensedImage"/>
            <click selector="{{AdobeStockImagePreviewSection.saveLicensedImage}}" stepKey="clickSave"/>
            <waitForPageLoad stepKey="waitForPromptModal"/>
            <grabValueFrom selector="{{AdobeStockImagePreviewSection.generatedImageName}}" stepKey="grabSaveImageFileName"/>
            <click selector="{{AdobeStockImagePreviewSection.confirm}}" stepKey="clickOnPopupConfirm"/>
            <waitForPageLoad stepKey="waitForMediaGalleryOpen"/>
            <seeElement selector="{{AdobeStockSection.mediaGalleryImage({$grabSaveImageFileName})}}" stepKey="assertSavedImage"/>
            <actionGroup ref="AdminAdobeStockOpenPanelFromMediaGalleryActionGroup" stepKey="openAdobeStockPanelAgain"/>
        </before>
        <after>
            <actionGroup ref="AdminOpenMediaGalleryForPageNoEditorActionGroup" stepKey="openMediaGalleryForPage"/>
            <actionGroup ref="AdminAdobeStockOpenPanelFromMediaGalleryActionGroup" stepKey="openAdobeStockPanel"/>
            <actionGroup ref="AdminAdobeStockUserSignOutActionGroup" stepKey="adobeLogout"/>
            <actionGroup ref="AdminAdobeStockAssertUserNotLoggedActionGroup" stepKey="assertAdobeUserLoggedOut"/>
            <actionGroup ref="resetAdminDataGridToDefaultView" stepKey="resetAdminDataGridToDefaultView"/>
            <actionGroup ref="logout" stepKey="adminLogout"/>
        </after>
        <actionGroup ref="AdminSearchImagesOnModalActionGroup" stepKey="searchForLicensedImage">
            <argument name="query" value="{{AdobeStockConfigDataLicensedImage.value}}"/>
        </actionGroup>
        <actionGroup ref="AdminAdobeStockExpandImagePreviewActionGroup" stepKey="expandLicensedImage"/>
        <grabAttributeFrom selector="{{AdobeStockImagePreviewSection.locateImage}}" userInput="name" stepKey="grabImageFileName"/>
        <click selector="{{AdobeStockImagePreviewSection.locateImage}}" stepKey="clickLocate"/>
        <waitForPageLoad stepKey="waitForMediaGalleryOpen"/>
        <seeElement selector="{{AdobeStockSection.mediaGalleryImage({$grabImageFileName})}}" stepKey="assertSavedImage"/>
        <actionGroup ref="AdminMediaGalleryDeleteImage" stepKey="deleteImageActionGroup">
            <argument name="generatedImageName" value="{$grabImageFileName}"/>
        </actionGroup>
    </test>
</tests>
